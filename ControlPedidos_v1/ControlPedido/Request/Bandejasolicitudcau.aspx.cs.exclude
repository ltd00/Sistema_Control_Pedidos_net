using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using ML.CAU.UIC;
using MC.ControlPedido.Logica;
using MC.ControlPedido.Model;
using ML.Seguridad.Entidades;
using ML.Seguridad.Logica;
using ML.Comun.Entidades;
using ML.Comun.Logica;

public partial class Request_Bandejasolicitudcau : UIPage
{
    #region Inicio

    protected override void OnLoad(EventArgs e)
    {
        //Cargamos eventos en los botones de paginación        
        this.gvBandeja.RowDataBound += new GridViewRowEventHandler(gvBandeja_RowDataBound);
        imgbtnStart.Click += new ImageClickEventHandler(imgbtnStart_Click);
        imgbtnNext.Click += new ImageClickEventHandler(imgbtnNext_Click);
        imgbtnBack.Click += new ImageClickEventHandler(imgbtnBack_Click);
        imgbtnEnd.Click += new ImageClickEventHandler(imgbtnEnd_Click);

        if (IsPostBack == false)
        {
            CargarEstado();
            PaginacionEnabled(false);
            CargarSede();
            CargarArea();
            CargarUsuario();
            ListarSolicitud();
        }
    }

    #endregion

    #region Metodos      

    /// <summary>
    /// Metodo que permite cargar sedes de la empresa
    /// <FechaCrea>02-03-2012</FechaCrea>
    /// <CreadoPor>Edgar Huarcaya C.</CreadoPor>
    /// <Empresa>Minera Laytaruma S.A.</Empresa>
    /// </summary>
    /// <returns></returns>    
    private void CargarSede()
    {
        try
        {

            //Carga Sedes
            //SedeLN objSedeLN = new SedeLN();
            Bind(this.ddlSede, SedeLN.Listar(), "Id", "Nombre");
            this.ddlSede.Items.Insert(0, new ListItem("-Todos-", "0"));
            //BuscarValueDropDownList(this.ddlSede, _auditoria.Usuario.IdSede.ToString());

        }
        catch (Exception ex)
        {
            CScript.MessageBox(0, ex.Message, upBandeja);
        }
    }

    /// <summary>
    /// Metodo que permite cargar areas de la empresa
    /// <FechaCrea>02-03-2012</FechaCrea>
    /// <CreadoPor>Edgar Huarcaya C.</CreadoPor>
    /// <Empresa>Minera Laytaruma S.A.</Empresa>
    /// </summary>
    /// <returns></returns>    
    private void CargarArea()
    {
        try
        {

        //Carga Areas
        //AreaLN objAreaLN = new AreaLN();
        Bind(this.ddlArea, AreaLN.Listar(int.Parse(this.ddlSede.SelectedValue)), "Id", "Nombre");
        this.ddlArea.Items.Insert(0, new ListItem("-Todos-", "0"));
        //BuscarValueDropDownList(this.ddlArea, _auditoria.Usuario.IdArea.ToString());

        //objAreaLN = null;
        }
        catch (Exception ex)
        {

            CScript.MessageBox(0, ex.Message, upBandeja);
        }

    }

    /// <summary>
    /// Metodo que permite cargar usuarios del sistema
    /// <FechaCrea>06-03-2012</FechaCrea>
    /// <CreadoPor>Edgar Huarcaya C.</CreadoPor>
    /// <Empresa>Minera Laytaruma S.A.</Empresa>
    /// </summary>
    /// <returns></returns>    
    private void CargarUsuario()
    {
        try
        {
            //UsuarioLN objUsuarioLN = new UsuarioLN();
            //Bind(this.ddlSolicitante, UsuarioLN.Listar(string.Empty, _auditoria.AppId), "Id", "NombreCompleto");
            //this.ddlSolicitante.Items.Insert(0, new ListItem("-Todos-", "0"));

            Bind(this.ddlSolicitante, UsuarioLN.Listar(int.Parse(this.ddlSede.SelectedValue), 0, _auditoria.AppId), "Id", "NombreCompleto");            
            this.ddlSolicitante.Items.Insert(0, new ListItem("-Todos-", "0"));

        }
        catch (Exception ex)
        {
            
            CScript.MessageBox(0, ex.Message , upBandeja);
        }
    }

    /// <summary>
    /// Metodo que permite listar estados de solicitud
    /// <FechaCrea>01-03-2012</FechaCrea>
    /// <CreadoPor>Edgar Huarcaya C.</CreadoPor>
    /// <Empresa>Minera Laytaruma S.A.</Empresa>
    /// </summary>
    /// <returns></returns>    
    private void CargarEstado()
    {
        //this.ddlEstado.Items.Add(new ListItem("-Todos-", "0"));
        //this.ddlEstado.Items.Add(new ListItem("Registrado", UIConstante.EstadoSolicitud.Registrado));
        this.ddlEstado.Items.Add(new ListItem("Enviado", UIConstante.EstadoSolicitud.Enviado));
        this.ddlEstado.Items.Add(new ListItem("Recibido", UIConstante.EstadoSolicitud.Recibido));
        //this.ddlEstado.Items.Add(new ListItem("Anulado", UIConstante.EstadoSolicitud.Anulado));
    }

    /// <summary>
    /// Metodo que permite listar solicitantes
    /// <FechaCrea>01-03-2012</FechaCrea>
    /// <CreadoPor>Edgar Huarcaya C.</CreadoPor>
    /// <Empresa>Minera Laytaruma S.A.</Empresa>
    /// </summary>
    /// <returns></returns>    
    private void Solicitante()
    {

    }

    /// <summary>
    /// Metodo que permite listar solicitudes de cambio
    /// <FechaCrea>29-02-2012</FechaCrea>
    /// <CreadoPor>Edgar Huarcaya C.</CreadoPor>
    /// <Empresa>Minera Laytaruma S.A.</Empresa>
    /// </summary>
    /// <returns></returns>    
    private void ListarSolicitud()
    {
        try
        {

            DataTable dtData;
            SolicitudCambio objSolicitudCambio = new SolicitudCambio();
            objSolicitudCambio.CodigoSolicitud = 0;
            objSolicitudCambio.NumeroSolicitud = this.txtNroSolicitud.Text;
            objSolicitudCambio.FechaSolicitud = ML.Comun.Entidades.Util.ParseDateTime(this.txtFecha.Text);
            objSolicitudCambio.Sede.Id = int.Parse(this.ddlSede.SelectedValue);
            objSolicitudCambio.Area.Id = int.Parse(this.ddlArea.SelectedValue);
            objSolicitudCambio.Estado = this.ddlEstado.SelectedValue;
            objSolicitudCambio.UsuarioCrea = ML.Comun.Entidades.Util.ParseGuid(this.ddlSolicitante.SelectedValue);

            dtData = SolicitudCambioBLL.Instance.ListarSolicitudCambio(objSolicitudCambio);

            this.gvBandeja.DataSource = dtData;
            this.gvBandeja.DataBind();

            //Invoca al metodo para paginar la grilla
            Paginar(dtData, this.gvBandeja, this.litNumeroRegistros, this.litPagina);

        }
        catch (Exception ex)
        {

            CScript.MessageBox(0, ex.Message, upBandeja);
        }
    }

    /// <summary>
    /// Metodo para actualizar el adjunto
    /// </summary>
    private void ActualizarObservacion()
    {
        try
        {
            SolicitudCambio objSolicitudCambio = new SolicitudCambio();
            objSolicitudCambio.CodigoSolicitud = int.Parse(this.hidCodigoSolicitud.Value);
            objSolicitudCambio.Observacion = this.txtObservacion.Text;

            SolicitudCambioBLL.Instance.ActualizarObservacionSolicitud(objSolicitudCambio);

            objSolicitudCambio.Dispose();
            objSolicitudCambio = null;

        }
        catch (Exception ex)
        {

            CScript.MessageBox(0, ex.Message, upBandeja);
        }
    }


    #endregion

    #region Eventos Paginado

    void Inicializar()
    {
        try
        {

            this.imgbtnBack.Visible = false;
            this.imgbtnStart.Visible = false;
            this.imgbtnEnd.Visible = false;
            this.imgbtnNext.Visible = false;

            this.imgbtnBack.Enabled = false;
            this.imgbtnStart.Enabled = false;
            this.imgbtnEnd.Enabled = false;
            this.imgbtnNext.Enabled = false;

        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    void imgbtnEnd_Click(object sender, ImageClickEventArgs e)
    {
        try
        {
            if (this.gvBandeja.PageIndex < (this.gvBandeja.PageCount - 1))
            {
                this.gvBandeja.PageIndex = this.gvBandeja.PageCount - 1;
                ListarSolicitud();

                this.imgbtnStart.Enabled = true;
                this.imgbtnBack.Enabled = true;
                this.imgbtnEnd.Enabled = false;
                this.imgbtnNext.Enabled = false;
            }

        }
        catch (Exception ex)
        {
            CScript.MessageBox(0, ex.Message);
        }
    }

    void imgbtnBack_Click(object sender, ImageClickEventArgs e)
    {
        try
        {
            if (this.gvBandeja.PageIndex > 0)
            {
                this.gvBandeja.PageIndex = (this.gvBandeja.PageIndex - 1);
                ListarSolicitud();

                if (this.gvBandeja.PageIndex > 0)
                {
                    this.imgbtnStart.Enabled = true;
                    this.imgbtnBack.Enabled = true;
                }
                else
                {
                    this.imgbtnStart.Enabled = false;
                    this.imgbtnBack.Enabled = false;
                }

                this.imgbtnEnd.Enabled = true;
                this.imgbtnNext.Enabled = true;
            }

        }
        catch (Exception ex)
        {
            CScript.MessageBox(0, ex.Message);
        }
    }

    void imgbtnNext_Click(object sender, ImageClickEventArgs e)
    {
        try
        {
            if (this.gvBandeja.PageIndex < (this.gvBandeja.PageCount - 1))
            {
                this.gvBandeja.PageIndex = this.gvBandeja.PageIndex + 1;

                ListarSolicitud();

                this.imgbtnStart.Enabled = true;
                this.imgbtnBack.Enabled = true;

                if (this.gvBandeja.PageIndex == (this.gvBandeja.PageCount - 1))
                {
                    this.imgbtnEnd.Enabled = false;
                    this.imgbtnNext.Enabled = false;
                }
                else
                {
                    this.imgbtnEnd.Enabled = true;
                    this.imgbtnNext.Enabled = true;
                }

            }
        }
        catch (Exception ex)
        {
            CScript.MessageBox(0, ex.Message);
        }
    }

    void imgbtnStart_Click(object sender, ImageClickEventArgs e)
    {
        try
        {
            if (this.gvBandeja.PageIndex > 0)
            {
                this.gvBandeja.PageIndex = 0;
                ListarSolicitud();

                this.imgbtnStart.Enabled = false;
                this.imgbtnBack.Enabled = false;
                this.imgbtnNext.Enabled = true;
                this.imgbtnEnd.Enabled = true;
            }
        }
        catch (Exception ex)
        {
            CScript.MessageBox(0, ex.Message);
        }
    }

    #endregion

    #region paginacion
    /// <summary>
    /// Metodo que permite paginar un GridView
    /// </summary>
    /// <param name="dtData"></param>
    /// <param name="gvLista"></param>
    /// <param name="litRowCount"></param>
    /// <param name="litPage"></param>
    /// <returns></returns>
    /// <Empresa>Minera Laytaruma S.A.</Empresa>
    /// <Creado por>Edgar Huarcaya C.</Creado>
    /// <Fecha Crea>01 mar 2012</Fecha>
    void Paginar(System.Data.DataTable dtData, System.Web.UI.WebControls.GridView gvLista, System.Web.UI.WebControls.Literal litRowCount, System.Web.UI.WebControls.Literal litPage)
    {
        try
        {

            Int16 pageSize = Int16.Parse(System.Web.Configuration.WebConfigurationManager.AppSettings["numeroRegistrosPorPagina"]);
            if (dtData != null)
            {
                if (dtData.Rows.Count >= pageSize)
                {
                    //PaginacionVisible(true);
                    this.imgbtnEnd.Enabled = true;
                    this.imgbtnNext.Enabled = true;
                }
                else
                {
                    //Inicializar();
                    //PaginacionVisible(false);
                    PaginacionEnabled(false);
                    litRowCount.Text = string.Format("Número de Registros encontrados : {0}", 0);
                    litPage.Text = "Página: 0 de 0";
                }

                Int16 intPag;
                try
                {
                    intPag = short.Parse(Math.Ceiling(Convert.ToDouble(dtData.Rows.Count) / pageSize).ToString());
                    if (intPag == 0) intPag = 1;
                }
                catch (Exception e)
                {
                    intPag = 0;
                }

                litRowCount.Text = string.Format("Número de Registros encontrados : {0}", dtData.Rows.Count);
                litPage.Text = "Página: " + Convert.ToString(this.gvBandeja.PageIndex + 1) + " de " + intPag.ToString();
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    /// <summary>
    /// Metodo para paginacion en la grilla
    /// </summary>
    /// <param name="valor"></param>
    void PaginacionVisible(bool valor)
    {
        try
        {
            imgbtnStart.Visible = valor;
            imgbtnNext.Visible = valor;
            imgbtnBack.Visible = valor;
            imgbtnEnd.Visible = valor;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    /// <summary>
    /// Metodo para paginacion en la grilla
    /// </summary>
    /// <param name="valor"></param>
    void PaginacionEnabled(bool valor)
    {
        try
        {
            imgbtnStart.Enabled = valor;
            imgbtnNext.Enabled = valor;
            imgbtnBack.Enabled = valor;
            imgbtnEnd.Enabled = valor;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    #endregion

    #region Eventos
    void gvBandeja_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        try
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                DataRowView fila = (DataRowView)e.Row.DataItem;
                ImageButton imbDelete = (ImageButton)e.Row.FindControl("imbDelete");
                ImageButton imbEdit = (ImageButton)e.Row.FindControl("imbEdit");
                ImageButton btnPrint = (ImageButton)e.Row.FindControl("btnPrint");
                ImageButton btnComment = (ImageButton)e.Row.FindControl("btnComment");
                ImageButton btnVerAdjunto = (ImageButton)e.Row.FindControl("btnVerAdjunto");
                ImageButton btnGeneraIncidencia = (ImageButton)e.Row.FindControl("btnGeneraIncidencia");

                if (btnVerAdjunto.CommandName.Length > 0)
                {
                    btnVerAdjunto.Attributes.Add("onclick", "return goAttach('" + btnVerAdjunto.CommandName + "');");
                }
                else {
                    btnVerAdjunto.ToolTip = "No hay ningún documento adjunto";
                }

                #region Anulado
                if (fila["V_ESTADO"].ToString().CompareTo(UIConstante.EstadoSolicitud.Anulado) == 0)
                {
                    imbDelete.ToolTip = "Opción deshabilitada. Registro inactivo.";
                    imbDelete.Enabled = false;

                    imbEdit.ToolTip = "Opción deshabilitada. Registro inactivo.";
                    imbEdit.Enabled = false;

                    btnPrint.ToolTip = "Opción deshabilitada. Registro inactivo.";
                    btnPrint.Enabled = false;

                    btnComment.ToolTip = "Opción deshabilitada. Registro inactivo.";
                    btnComment.Enabled = false;

                    return;
                }
                else 
                {
                    btnPrint.Attributes.Add("onclick", "return goSolicitudFicha('" + btnPrint.CommandArgument + "');");
                }
                #endregion

                #region Registrado
                if (fila["V_ESTADO"].ToString().CompareTo(UIConstante.EstadoSolicitud.Registrado) == 0)
                {
                    imbDelete.Attributes.Add("onclick", "return confirm('¿Está seguro de Anular la solicitud?');");                    
                }
                #endregion

                #region Enviado
                if (fila["V_ESTADO"].ToString().CompareTo(UIConstante.EstadoSolicitud.Enviado) == 0)
                {
                    imbDelete.ToolTip = "Opción deshabilitada. Registro enviado.";
                    imbDelete.Enabled = false;

                    imbEdit.ToolTip = "Opción deshabilitada. Registro enviado.";
                    imbEdit.Enabled = false;

                    btnComment.Attributes.Add("onclick", "return BusquedaEquipo_callDialogIn('" + btnComment.CommandArgument + "');");

                    //btnComment.ToolTip = "Opción deshabilitada. Registro enviado.";
                    //btnComment.Enabled = false;

                    return;
                }
                #endregion

                #region "Recibido"
                if (fila["V_ESTADO"].ToString().CompareTo(UIConstante.EstadoSolicitud.Recibido) == 0)
                {
                    imbDelete.ToolTip = "Opción deshabilitada. Registro recibido por Centro de Atención a Usuario.";
                    imbDelete.Enabled = false;

                    imbEdit.ToolTip = "Opción deshabilitada. Registro recibido por Centro de Atención a Usuario.";
                    imbEdit.Enabled = false;

                    btnComment.ToolTip = "Opción deshabilitada. Registro recibido por Centro de Atención a Usuario.";
                    btnComment.Enabled = false;

                    btnGeneraIncidencia.ToolTip = "Opción deshabilitada. Registro recibido por Centro de Atención a Usuario.";
                    btnGeneraIncidencia.Enabled = false;

                    return;
                }

                #endregion
            }
        }
        catch (Exception)
        {

            throw;
        }
    }
    protected void btnBuscar_Click(object sender, EventArgs e)
    {
        ListarSolicitud();
    }
    protected void btnGuardar_Click(object sender, EventArgs e)
    {
        ActualizarObservacion();
    }
    protected void ddlSede_SelectedIndexChanged(object sender, EventArgs e)
    {
        CargarArea();
        CargarUsuario();
    }
    protected void imbDelete_Click(object sender, ImageClickEventArgs e)
    {
        try
        {
            ImageButton imbDelete = (ImageButton)sender;

            int intCodigoSolicitud = int.Parse(imbDelete.CommandArgument);
            SolicitudCambio objSolicitudCambio = new SolicitudCambio();
            objSolicitudCambio.CodigoSolicitud = intCodigoSolicitud;
            objSolicitudCambio.UsuarioModifica = _auditoria.Usuario.Id;
            objSolicitudCambio.Estado = UIConstante.EstadoSolicitud.Anulado;

            SolicitudCambioBLL.Instance.CambiarEstadoSolicitudCambio(objSolicitudCambio);

            objSolicitudCambio.Dispose();
            objSolicitudCambio = null;

            ListarSolicitud();
        }
        catch (Exception ex)
        {
            CScript.MessageBox(0, ex.Message, upBandeja);
        }
    }
    protected void imbEdit_Click(object sender, ImageClickEventArgs e)
    {
        try
        {
            ImageButton imbEdit = (ImageButton)sender;
            Response.Redirect("wFrmSolicitudcambio.aspx?param=" + imbEdit.CommandArgument, false);

        }
        catch (Exception ex)
        {
            CScript.MessageBox(0, ex.Message, upBandeja);
        }
    }
    protected void btnSend_Click(object sender, ImageClickEventArgs e)
    {
        try
        {
            ImageButton btnSend = (ImageButton)sender;
            //Valida antes enviar la solicitud
            if (btnSend.CommandName.Length == 0)
            {
                CScript.MessageBox(0, "No se ha adjuntado ningún documento a la solicitud", upBandeja);
                return;
            }

            int intCodigoSolicitud = int.Parse(btnSend.CommandArgument);

            SolicitudCambio objSolicitudCambio = new SolicitudCambio();
            objSolicitudCambio.CodigoSolicitud = intCodigoSolicitud;
            objSolicitudCambio.UsuarioModifica = _auditoria.Usuario.Id;
            objSolicitudCambio.Estado = UIConstante.EstadoSolicitud.Enviado;

            SolicitudCambioBLL.Instance.CambiarEstadoSolicitudCambio(objSolicitudCambio);

            objSolicitudCambio.Dispose();
            objSolicitudCambio = null;

            ListarSolicitud();
        }
        catch (Exception ex)
        {
            CScript.MessageBox(0, ex.Message, upBandeja);
        }
    }
    protected void btnGeneraIncidencia_Click(object sender, ImageClickEventArgs e)
    {
        ImageButton btnGeneraIncidencia = (ImageButton)sender;
        Response.Redirect("../Incident/RegistrarIncidente.aspx?param=new&sc=" + btnGeneraIncidencia.CommandArgument, false);
    }
    #endregion

}